from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
import datetime
from functools import wraps
from sqlalchemy.exc import IntegrityError

app = Flask(__name__)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL –∏–∑ Render)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://gradeup_db_user:73Dm62s8x1XAizInR6XQxT2Jfr4drZun@dpg-cuk0p1dds78s739jsph0-a.oregon-postgres.render.com/gradeup_db?sslmode=require'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'supersecretkey'  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT

db = SQLAlchemy(app)

# üîπ –ú–æ–¥–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    inn = db.Column(db.String(20), unique=True, nullable=False)
    description = db.Column(db.Text)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

# üîπ –ú–æ–¥–µ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
class Candidate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    city = db.Column(db.String(50))
    position = db.Column(db.String(100))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
with app.app_context():
    db.create_all()

# üîπ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ (JWT)
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}), 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        except:
            return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'}), 401
        return f(*args, **kwargs)
    return decorated

@app.route('/')
def home():
    return "–ü—Ä–∏–≤–µ—Ç, Gradeup MVP —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π!"

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@app.route('/register_company', methods=['POST'])
def register_company():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if Company.query.filter_by(email=data['email']).first():
            return jsonify({'error': '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'}), 400
        if Company.query.filter_by(inn=data['inn']).first():
            return jsonify({'error': '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –ò–ù–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

        hashed_password = generate_password_hash(data['password'], method='pbkdf2:sha256')
        new_company = Company(
            name=data['name'],
            inn=data['inn'],
            description=data.get('description', ''),
            email=data['email'],
            password=hashed_password
        )

        db.session.add(new_company)
        db.session.commit()
        return jsonify({'message': '–ö–æ–º–ø–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'}), 201

    except IntegrityError:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –ò–ù–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
    except Exception as e:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
@app.route('/register_candidate', methods=['POST'])
def register_candidate():
    try:
        data = request.get_json()
        if Candidate.query.filter_by(email=data['email']).first():
            return jsonify({'error': '–ö–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}), 400

        hashed_password = generate_password_hash(data['password'], method='pbkdf2:sha256')
        new_candidate = Candidate(
            name=data['name'],
            email=data['email'],
            password=hashed_password,
            city=data.get('city', ''),
            position=data.get('position', '')
        )

        db.session.add(new_candidate)
        db.session.commit()
        return jsonify({'message': '–ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!'}), 201

    except IntegrityError:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}), 400
    except Exception as e:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –õ–æ–≥–∏–Ω (JWT)
@app.route('/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        user = Company.query.filter_by(email=data['email']).first() or Candidate.query.filter_by(email=data['email']).first()

        if not user or not check_password_hash(user.password, data['password']):
            return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401

        token = jwt.encode(
            {'email': user.email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)},
            app.config['SECRET_KEY'],
            algorithm='HS256'
        )

        return jsonify({'token': token})
    
    except Exception as e:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å —Ç–æ–∫–µ–Ω–æ–º)
@app.route('/protected', methods=['GET'])
@token_required
def protected():
    return jsonify({'message': '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'})

if __name__ == '__main__':
    app.run(debug=True, port=5000)


