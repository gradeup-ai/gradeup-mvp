from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import os
import requests
import openai
from livekit.api import RoomServiceClient
from livekit.models import CreateRoomRequest
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')

db = SQLAlchemy(app)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LiveKit
LIVEKIT_URL = "wss://ai-hr-g13ip1bp.livekit.cloud"
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY")
LIVEKIT_API_SECRET = os.getenv("LIVEKIT_API_SECRET")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∏ Deepgram
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
DEEPGRAM_VOICE_MODEL = "aura-asteria-en"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ LiveKit
lk_client = RoomServiceClient(LIVEKIT_URL, LIVEKIT_API_KEY, LIVEKIT_API_SECRET)

# ‚úÖ –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    inn = db.Column(db.String(20), unique=True, nullable=False)
    description = db.Column(db.Text)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Candidate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    city = db.Column(db.String(100))
    position = db.Column(db.String(100))

class Vacancy(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('company.id'), nullable=False)
    position = db.Column(db.String(100), nullable=False)
    grade = db.Column(db.String(50))
    tasks = db.Column(db.Text)
    tools = db.Column(db.Text)
    skills = db.Column(db.Text)
    theoretical_knowledge = db.Column(db.Text)
    salary_range = db.Column(db.String(100))
    work_format = db.Column(db.String(50))
    client_industry = db.Column(db.String(100))
    city = db.Column(db.String(100))
    work_time = db.Column(db.String(50))
    benefits = db.Column(db.Text)
    additional_info = db.Column(db.Text)

with app.app_context():
    db.create_all()

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return "–ü—Ä–∏–≤–µ—Ç, Gradeup MVP!"

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ LiveKit
@app.route('/create_room', methods=['POST'])
def create_room():
    try:
        data = request.get_json()
        room_name = data.get("room_name", "interview-room")

        request = CreateRoomRequest(name=room_name)
        room = lk_client.create_room(request)

        return jsonify({"room_url": f"{LIVEKIT_URL}/join/{room.name}"})

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã", "details": str(e)}), 500

# ‚úÖ AI-HR –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
@app.route('/ai_hr_interview', methods=['POST'])
def ai_hr_interview():
    try:
        data = request.get_json()
        vacancy = data.get("vacancy", {})
        candidate = data.get("candidate", {})

        # üü¢ –î–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
        position = vacancy.get('position', '').strip()
        company_name = vacancy.get('company_name', '').strip()

        position_text = position if position else "–≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        company_text = company_name if company_name else "–∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        prompt = f"""
        –¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π HR –ø–æ –∏–º–µ–Ω–∏ –≠–º–∏–ª–∏. –°–µ–π—á–∞—Å —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é **{position_text}** –≤ –∫–æ–º–ø–∞–Ω–∏–∏ **{company_text}**.

        üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        üèô –ì–æ—Ä–æ–¥: {candidate.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}
        üîß –ù–∞–≤—ã–∫–∏: {vacancy.get('skills', '–ù–∞–≤—ã–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')}

        **–ù–∞—á–Ω–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ –∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏.**
        –ó–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞–π **—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã**, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
        –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ **–æ—Ü–µ–Ω–∏–≤–∞–π**, –Ω–æ –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–π –≤–µ—Ä–¥–∏–∫—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ–¥–∏ –±–µ—Å–µ–¥—É.

        üìù **–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤:**  
        - –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –±—ã–ª —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å {vacancy.get('tools', '—É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏')}.
        - –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã —Ä–µ—à–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é {vacancy.get('skills', '—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤')}?
        - –ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ {vacancy.get('work_format', '—Ç–µ–∫—É—â–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã')}?

        **–í –∫–æ–Ω—Ü–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω –ø–æ–ª—É—á–∏—Ç –æ—Ç—á–µ—Ç –ø–æ–∑–∂–µ.**
        """

        openai.api_key = OPENAI_API_KEY
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}]
        )

        return jsonify({"ai_response": response['choices'][0]['message']['content']})

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ AI HR", "details": str(e)}), 500

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —Å Deepgram (TTS)
@app.route('/generate_speech', methods=['POST'])
def generate_speech():
    try:
        data = request.get_json()
        text = data.get("text", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞—á–Ω–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.")

        url = "https://api.deepgram.com/v1/speak"
        headers = {
            "Authorization": f"Token {DEEPGRAM_API_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "text": text,
            "model": DEEPGRAM_VOICE_MODEL
        }

        response = requests.post(url, json=payload, headers=headers)
        return response.content  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏", "details": str(e)}), 500

# ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Deepgram (STT)
@app.route('/transcribe_audio', methods=['POST'])
def transcribe_audio():
    try:
        if 'audio' not in request.files:
            return jsonify({"error": "–§–∞–π–ª –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

        audio_file = request.files['audio']
        url = "https://api.deepgram.com/v1/listen"
        headers = {
            "Authorization": f"Token {DEEPGRAM_API_KEY}"
        }
        response = requests.post(url, headers=headers, files={"audio": audio_file})

        return response.json()

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", "details": str(e)}), 500

# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    app.run(debug=True, port=5000)

