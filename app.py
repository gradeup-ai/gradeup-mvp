from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
import datetime
from functools import wraps

app = Flask(__name__)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://gradeup_db_8l0b_user:kfPPw4BhBttJ5QtTGUfq6UpofZ1G5c3y@dpg-cuk36rggph6c73bn3rbg-a.oregon-postgres.render.com/gradeup_db_8l0b?sslmode=require'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'supersecretkey'  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT

# üîπ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–∏–∑–±–µ–≥–∞–µ–º —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    "pool_pre_ping": True
}

db = SQLAlchemy(app)

# üîπ –ú–æ–¥–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    inn = db.Column(db.String(20), unique=True, nullable=False)
    description = db.Column(db.Text)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

# üîπ –ú–æ–¥–µ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
class Candidate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    city = db.Column(db.String(100))
    position = db.Column(db.String(100))

# üîπ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
with app.app_context():
    db.create_all()

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return "–ü—Ä–∏–≤–µ—Ç, Gradeup MVP!"

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
@app.route('/register_company', methods=['POST', 'OPTIONS'])
def register_company():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'CORS preflight OK'}), 200

    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if Company.query.filter_by(email=data['email']).first():
            return jsonify({'error': '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'}), 400
        if Company.query.filter_by(inn=data['inn']).first():
            return jsonify({'error': '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –ò–ù–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

        hashed_password = generate_password_hash(data['password'], method='pbkdf2:sha256')
        new_company = Company(
            name=data['name'],
            inn=data['inn'],
            description=data.get('description', ''),
            email=data['email'],
            password=hashed_password
        )

        db.session.add(new_company)
        db.session.commit()
        return jsonify({'message': '–ö–æ–º–ø–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'}), 201

    except Exception as e:
        db.session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
@app.route('/register_candidate', methods=['POST', 'OPTIONS'])
def register_candidate():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'CORS preflight OK'}), 200

    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        if Candidate.query.filter_by(email=data['email']).first():
            return jsonify({'error': '–ö–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}), 400

        hashed_password = generate_password_hash(data['password'], method='pbkdf2:sha256')
        new_candidate = Candidate(
            name=data['name'],
            email=data['email'],
            password=hashed_password,
            city=data.get('city', ''),
            position=data.get('position', '')
        )

        db.session.add(new_candidate)
        db.session.commit()
        return jsonify({'message': '–ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!'}), 201

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (JWT-—Ç–æ–∫–µ–Ω)
@app.route('/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        user = Company.query.filter_by(email=data['email']).first() or Candidate.query.filter_by(email=data['email']).first()
        if not user or not check_password_hash(user.password, data['password']):
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401

        token = jwt.encode({'email': user.email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=12)},
                           app.config['SECRET_KEY'], algorithm='HS256')
        return jsonify({'token': token})

    except Exception as e:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'details': str(e)}), 500

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT-—Ç–æ–∫–µ–Ω–∞
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}), 403

        try:
            token = token.split(" ")[1]  # "Bearer –¢–í–û–ô_–¢–û–ö–ï–ù"
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'], options={"verify_exp": False})
            current_user = Company.query.filter_by(email=data['email']).first() or Candidate.query.filter_by(email=data['email']).first()
            if not current_user:
                return jsonify({'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'}), 403
        except Exception as e:
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞', 'details': str(e)}), 403

        return f(current_user, *args, **kwargs)
    return decorated

# ‚úÖ –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–æ–∫–µ–Ω–æ–º)
@app.route('/protected', methods=['GET'])
@token_required
def protected_route(current_user):
    return jsonify({'message': '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', 'user_email': current_user.email})

# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    app.run(debug=True, port=5000)


