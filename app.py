from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import os
import requests
import openai
from deepgram import Deepgram
from livekit import AccessToken, VideoGrant
from livekit.api import RoomServiceClient
from livekit.models import CreateRoomRequest

app = Flask(__name__)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')

db = SQLAlchemy(app)

# üîπ API Keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # GPT-4o
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
DEEPGRAM_VOICE_MODEL = "aura-asteria-en"  # –ü–æ–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram
dg_client = Deepgram(DEEPGRAM_API_KEY)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LiveKit
LIVEKIT_URL = "wss://ai-hr-g13ip1bp.livekit.cloud"
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY")
LIVEKIT_API_SECRET = os.getenv("LIVEKIT_API_SECRET")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ LiveKit
lk_client = RoomServiceClient(LIVEKIT_URL, LIVEKIT_API_KEY, LIVEKIT_API_SECRET)

# üîπ AI-HR –ù–∞—Å—Ç—Ä–æ–π–∫–∏
AI_HR_NAME = "–≠–º–∏–ª–∏"
GREETING_PROMPT = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç {AI_HR_NAME}, –∏ —è ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫—Ä—É—Ç–µ—Ä. –°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {{position}} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {{company_name}}. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–∞—Å—Å–∫–∞–∑–∞ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ?"
FAREWELL_PROMPT = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"

# üîπ **–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**
class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    inn = db.Column(db.String(20), unique=True, nullable=False)
    description = db.Column(db.Text)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Candidate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    city = db.Column(db.String(100))
    position = db.Column(db.String(100))
    skills = db.Column(db.Text)
    experience = db.Column(db.Text)
    interview_score = db.Column(db.Float, default=0)

class Vacancy(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('company.id'), nullable=False)
    position = db.Column(db.String(100), nullable=False)
    skills = db.Column(db.Text)
    tasks = db.Column(db.Text)
    theoretical_knowledge = db.Column(db.Text)

with app.app_context():
    db.create_all()

# ‚úÖ **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ AI-HR**
@app.route('/greet/<int:candidate_id>/<int:vacancy_id>', methods=['GET'])
def greet(candidate_id, vacancy_id):
    candidate = Candidate.query.get(candidate_id)
    vacancy = Vacancy.query.get(vacancy_id)
    company = Company.query.get(vacancy.company_id) if vacancy else None

    if not candidate or not vacancy or not company:
        return jsonify({"error": "–ö–∞–Ω–¥–∏–¥–∞—Ç, –≤–∞–∫–∞–Ω—Å–∏—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}), 404

    greeting = GREETING_PROMPT.format(position=vacancy.position, company_name=company.name)
    return jsonify({"message": greeting})

# ‚úÖ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ LiveKit**
@app.route('/create_room', methods=['POST'])
def create_room():
    try:
        data = request.get_json()
        room_name = data.get("room_name", "interview-room")

        request = CreateRoomRequest(name=room_name)
        room = lk_client.create_room(request)

        return jsonify({"room_url": f"{LIVEKIT_URL}/join/{room.name}"})

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã", "details": str(e)}), 500

# ‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit**
@app.route('/get_livekit_token', methods=['POST'])
def get_livekit_token():
    try:
        data = request.get_json()
        user_identity = data.get("identity", "candidate")

        token = AccessToken(LIVEKIT_API_KEY, LIVEKIT_API_SECRET, identity=user_identity)
        grant = VideoGrant(room_join=True, room_list=True)
        token.add_grant(grant)

        jwt_token = token.to_jwt()
        return jsonify({"token": jwt_token})

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞", "details": str(e)}), 500

# ‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ AI-HR**
@app.route('/generate_question', methods=['POST'])
def generate_question():
    try:
        data = request.get_json()
        candidate_id = data.get("candidate_id")
        vacancy_id = data.get("vacancy_id")

        candidate = Candidate.query.get(candidate_id)
        vacancy = Vacancy.query.get(vacancy_id)

        if not candidate or not vacancy:
            return jsonify({"error": "–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}), 404

        prompt = f"""
        –¢—ã ‚Äî AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –ø–æ –∏–º–µ–Ω–∏ {AI_HR_NAME}. –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—É **—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å** –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤.

        üîπ **–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏**:
        –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.position}
        –ö–æ–º–ø–∞–Ω–∏—è: {Company.query.get(vacancy.company_id).name}
        –ù–∞–≤—ã–∫–∏: {vacancy.skills}
        –ó–∞–¥–∞—á–∏: {vacancy.tasks}
        –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è: {vacancy.theoretical_knowledge}

        üîπ **–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**:
        –î–æ–ª–∂–Ω–æ—Å—Ç—å: {candidate.position}
        –ù–∞–≤—ã–∫–∏: {candidate.skills}
        –û–ø—ã—Ç: {candidate.experience}

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π **—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω** –≤–æ–ø—Ä–æ—Å.
        """

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        question = response['choices'][0]['message']['content']
        return jsonify({"question": question})

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞", "details": str(e)}), 500

# ‚úÖ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å Deepgram (STT)**
@app.route('/transcribe_audio', methods=['POST'])
def transcribe_audio():
    try:
        if 'audio' not in request.files:
            return jsonify({"error": "–§–∞–π–ª –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

        audio_file = request.files['audio']
        url = "https://api.deepgram.com/v1/listen"
        headers = {
            "Authorization": f"Token {DEEPGRAM_API_KEY}"
        }
        response = requests.post(url, headers=headers, files={"audio": audio_file})

        return response.json()

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", "details": str(e)}), 500

# ‚úÖ **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
if __name__ == '__main__':
    app.run(debug=True, port=5000)

